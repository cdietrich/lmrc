/*
* generated by Xtext
*/
grammar InternalDbDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.lmrc.db.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.lmrc.db.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.lmrc.db.services.DbDslGrammarAccess;

}

@parser::members {
 
 	private DbDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DbDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleRoot
entryRuleRoot 
:
{ before(grammarAccess.getRootRule()); }
	 ruleRoot
{ after(grammarAccess.getRootRule()); } 
	 EOF 
;

// Rule Root
ruleRoot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRootAccess().getDatabaseParserRuleCall()); }
	ruleDatabase
{ after(grammarAccess.getRootAccess().getDatabaseParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDatabase
entryRuleDatabase 
:
{ before(grammarAccess.getDatabaseRule()); }
	 ruleDatabase
{ after(grammarAccess.getDatabaseRule()); } 
	 EOF 
;

// Rule Database
ruleDatabase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDatabaseAccess().getGroup()); }
(rule__Database__Group__0)
{ after(grammarAccess.getDatabaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTable
entryRuleTable 
:
{ before(grammarAccess.getTableRule()); }
	 ruleTable
{ after(grammarAccess.getTableRule()); } 
	 EOF 
;

// Rule Table
ruleTable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTableAccess().getGroup()); }
(rule__Table__Group__0)
{ after(grammarAccess.getTableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumn
entryRuleColumn 
:
{ before(grammarAccess.getColumnRule()); }
	 ruleColumn
{ after(grammarAccess.getColumnRule()); } 
	 EOF 
;

// Rule Column
ruleColumn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getColumnAccess().getGroup()); }
(rule__Column__Group__0)
{ after(grammarAccess.getColumnAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractColumnMapper
entryRuleAbstractColumnMapper 
:
{ before(grammarAccess.getAbstractColumnMapperRule()); }
	 ruleAbstractColumnMapper
{ after(grammarAccess.getAbstractColumnMapperRule()); } 
	 EOF 
;

// Rule AbstractColumnMapper
ruleAbstractColumnMapper
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractColumnMapperAccess().getGroup()); }
(rule__AbstractColumnMapper__Group__0)
{ after(grammarAccess.getAbstractColumnMapperAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractDataType
entryRuleAbstractDataType 
:
{ before(grammarAccess.getAbstractDataTypeRule()); }
	 ruleAbstractDataType
{ after(grammarAccess.getAbstractDataTypeRule()); } 
	 EOF 
;

// Rule AbstractDataType
ruleAbstractDataType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractDataTypeAccess().getAlternatives()); }
(rule__AbstractDataType__Alternatives)
{ after(grammarAccess.getAbstractDataTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCharType
entryRuleCharType 
:
{ before(grammarAccess.getCharTypeRule()); }
	 ruleCharType
{ after(grammarAccess.getCharTypeRule()); } 
	 EOF 
;

// Rule CharType
ruleCharType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCharTypeAccess().getGroup()); }
(rule__CharType__Group__0)
{ after(grammarAccess.getCharTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberType
entryRuleNumberType 
:
{ before(grammarAccess.getNumberTypeRule()); }
	 ruleNumberType
{ after(grammarAccess.getNumberTypeRule()); } 
	 EOF 
;

// Rule NumberType
ruleNumberType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberTypeAccess().getGroup()); }
(rule__NumberType__Group__0)
{ after(grammarAccess.getNumberTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AbstractDataType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractDataTypeAccess().getCharTypeParserRuleCall_0()); }
	ruleCharType
{ after(grammarAccess.getAbstractDataTypeAccess().getCharTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractDataTypeAccess().getNumberTypeParserRuleCall_1()); }
	ruleNumberType
{ after(grammarAccess.getAbstractDataTypeAccess().getNumberTypeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Database__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Database__Group__0__Impl
	rule__Database__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getDatabaseKeyword_0()); }

	'database' 

{ after(grammarAccess.getDatabaseAccess().getDatabaseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Database__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Database__Group__1__Impl
	rule__Database__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getNameAssignment_1()); }
(rule__Database__NameAssignment_1)
{ after(grammarAccess.getDatabaseAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Database__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Database__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getTablesAssignment_2()); }
(rule__Database__TablesAssignment_2)*
{ after(grammarAccess.getDatabaseAccess().getTablesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Table__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Table__Group__0__Impl
	rule__Table__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getTableKeyword_0()); }

	'table' 

{ after(grammarAccess.getTableAccess().getTableKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Table__Group__1__Impl
	rule__Table__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getNameAssignment_1()); }
(rule__Table__NameAssignment_1)
{ after(grammarAccess.getTableAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Table__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getColumnsAssignment_2()); }
(rule__Table__ColumnsAssignment_2)*
{ after(grammarAccess.getTableAccess().getColumnsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Column__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Column__Group__0__Impl
	rule__Column__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getTypeAssignment_0()); }
(rule__Column__TypeAssignment_0)
{ after(grammarAccess.getColumnAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Column__Group__1__Impl
	rule__Column__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getNameAssignment_1()); }
(rule__Column__NameAssignment_1)
{ after(grammarAccess.getColumnAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Column__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getMapperAssignment_2()); }
(rule__Column__MapperAssignment_2)?
{ after(grammarAccess.getColumnAccess().getMapperAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AbstractColumnMapper__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractColumnMapper__Group__0__Impl
	rule__AbstractColumnMapper__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractColumnMapper__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractColumnMapperAccess().getAbstractColumnMapperAction_0()); }
(

)
{ after(grammarAccess.getAbstractColumnMapperAccess().getAbstractColumnMapperAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractColumnMapper__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractColumnMapper__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractColumnMapper__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractColumnMapperAccess().getSomethingKeyword_1()); }

	'something' 

{ after(grammarAccess.getAbstractColumnMapperAccess().getSomethingKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CharType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CharType__Group__0__Impl
	rule__CharType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CharType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharTypeAccess().getCharTypeAction_0()); }
(

)
{ after(grammarAccess.getCharTypeAccess().getCharTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CharType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CharType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CharType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharTypeAccess().getCharKeyword_1()); }

	'char' 

{ after(grammarAccess.getCharTypeAccess().getCharKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberType__Group__0__Impl
	rule__NumberType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTypeAccess().getNumberTypeAction_0()); }
(

)
{ after(grammarAccess.getNumberTypeAccess().getNumberTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTypeAccess().getNumberKeyword_1()); }

	'number' 

{ after(grammarAccess.getNumberTypeAccess().getNumberKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Database__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getDatabaseAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Database__TablesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getTablesTableParserRuleCall_2_0()); }
	ruleTable{ after(grammarAccess.getDatabaseAccess().getTablesTableParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Table__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Table__ColumnsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getColumnsColumnParserRuleCall_2_0()); }
	ruleColumn{ after(grammarAccess.getTableAccess().getColumnsColumnParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Column__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getTypeAbstractDataTypeParserRuleCall_0_0()); }
	ruleAbstractDataType{ after(grammarAccess.getColumnAccess().getTypeAbstractDataTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Column__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Column__MapperAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getMapperAbstractColumnMapperParserRuleCall_2_0()); }
	ruleAbstractColumnMapper{ after(grammarAccess.getColumnAccess().getMapperAbstractColumnMapperParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


