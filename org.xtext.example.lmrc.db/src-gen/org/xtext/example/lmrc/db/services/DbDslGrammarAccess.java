/*
* generated by Xtext
*/

package org.xtext.example.lmrc.db.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DbDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final RuleCall cDatabaseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Root:
		//
		//	Database;
		public ParserRule getRule() { return rule; }

		//Database
		public RuleCall getDatabaseParserRuleCall() { return cDatabaseParserRuleCall; }
	}

	public class DatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Database");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatabaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTablesTableParserRuleCall_2_0 = (RuleCall)cTablesAssignment_2.eContents().get(0);
		
		//Database:
		//
		//	"database" name=ID tables+=Table*;
		public ParserRule getRule() { return rule; }

		//"database" name=ID tables+=Table*
		public Group getGroup() { return cGroup; }

		//"database"
		public Keyword getDatabaseKeyword_0() { return cDatabaseKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//tables+=Table*
		public Assignment getTablesAssignment_2() { return cTablesAssignment_2; }

		//Table
		public RuleCall getTablesTableParserRuleCall_2_0() { return cTablesTableParserRuleCall_2_0; }
	}

	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cColumnsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnsColumnParserRuleCall_2_0 = (RuleCall)cColumnsAssignment_2.eContents().get(0);
		
		//Table:
		//
		//	"table" name=ID columns+=Column*;
		public ParserRule getRule() { return rule; }

		//"table" name=ID columns+=Column*
		public Group getGroup() { return cGroup; }

		//"table"
		public Keyword getTableKeyword_0() { return cTableKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//columns+=Column*
		public Assignment getColumnsAssignment_2() { return cColumnsAssignment_2; }

		//Column
		public RuleCall getColumnsColumnParserRuleCall_2_0() { return cColumnsColumnParserRuleCall_2_0; }
	}

	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeAbstractDataTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMapperAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMapperAbstractColumnMapperParserRuleCall_2_0 = (RuleCall)cMapperAssignment_2.eContents().get(0);
		
		//Column:
		//
		//	type=AbstractDataType name=ID mapper=AbstractColumnMapper?;
		public ParserRule getRule() { return rule; }

		//type=AbstractDataType name=ID mapper=AbstractColumnMapper?
		public Group getGroup() { return cGroup; }

		//type=AbstractDataType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//AbstractDataType
		public RuleCall getTypeAbstractDataTypeParserRuleCall_0_0() { return cTypeAbstractDataTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//mapper=AbstractColumnMapper?
		public Assignment getMapperAssignment_2() { return cMapperAssignment_2; }

		//AbstractColumnMapper
		public RuleCall getMapperAbstractColumnMapperParserRuleCall_2_0() { return cMapperAbstractColumnMapperParserRuleCall_2_0; }
	}

	public class AbstractColumnMapperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractColumnMapper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAbstractColumnMapperAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSomethingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AbstractColumnMapper:
		//
		//	{AbstractColumnMapper} "something";
		public ParserRule getRule() { return rule; }

		//{AbstractColumnMapper} "something"
		public Group getGroup() { return cGroup; }

		//{AbstractColumnMapper}
		public Action getAbstractColumnMapperAction_0() { return cAbstractColumnMapperAction_0; }

		//"something"
		public Keyword getSomethingKeyword_1() { return cSomethingKeyword_1; }
	}

	public class AbstractDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractDataType:
		//
		//	CharType | NumberType;
		public ParserRule getRule() { return rule; }

		//CharType | NumberType
		public Alternatives getAlternatives() { return cAlternatives; }

		//CharType
		public RuleCall getCharTypeParserRuleCall_0() { return cCharTypeParserRuleCall_0; }

		//NumberType
		public RuleCall getNumberTypeParserRuleCall_1() { return cNumberTypeParserRuleCall_1; }
	}

	public class CharTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CharType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCharTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCharKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CharType:
		//
		//	{CharType} "char";
		public ParserRule getRule() { return rule; }

		//{CharType} "char"
		public Group getGroup() { return cGroup; }

		//{CharType}
		public Action getCharTypeAction_0() { return cCharTypeAction_0; }

		//"char"
		public Keyword getCharKeyword_1() { return cCharKeyword_1; }
	}

	public class NumberTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NumberType:
		//
		//	{NumberType} "number";
		public ParserRule getRule() { return rule; }

		//{NumberType} "number"
		public Group getGroup() { return cGroup; }

		//{NumberType}
		public Action getNumberTypeAction_0() { return cNumberTypeAction_0; }

		//"number"
		public Keyword getNumberKeyword_1() { return cNumberKeyword_1; }
	}
	
	
	private RootElements pRoot;
	private DatabaseElements pDatabase;
	private TableElements pTable;
	private ColumnElements pColumn;
	private AbstractColumnMapperElements pAbstractColumnMapper;
	private AbstractDataTypeElements pAbstractDataType;
	private CharTypeElements pCharType;
	private NumberTypeElements pNumberType;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DbDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.lmrc.db.DbDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root:
	//
	//	Database;
	public RootElements getRootAccess() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//Database:
	//
	//	"database" name=ID tables+=Table*;
	public DatabaseElements getDatabaseAccess() {
		return (pDatabase != null) ? pDatabase : (pDatabase = new DatabaseElements());
	}
	
	public ParserRule getDatabaseRule() {
		return getDatabaseAccess().getRule();
	}

	//Table:
	//
	//	"table" name=ID columns+=Column*;
	public TableElements getTableAccess() {
		return (pTable != null) ? pTable : (pTable = new TableElements());
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}

	//Column:
	//
	//	type=AbstractDataType name=ID mapper=AbstractColumnMapper?;
	public ColumnElements getColumnAccess() {
		return (pColumn != null) ? pColumn : (pColumn = new ColumnElements());
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}

	//AbstractColumnMapper:
	//
	//	{AbstractColumnMapper} "something";
	public AbstractColumnMapperElements getAbstractColumnMapperAccess() {
		return (pAbstractColumnMapper != null) ? pAbstractColumnMapper : (pAbstractColumnMapper = new AbstractColumnMapperElements());
	}
	
	public ParserRule getAbstractColumnMapperRule() {
		return getAbstractColumnMapperAccess().getRule();
	}

	//AbstractDataType:
	//
	//	CharType | NumberType;
	public AbstractDataTypeElements getAbstractDataTypeAccess() {
		return (pAbstractDataType != null) ? pAbstractDataType : (pAbstractDataType = new AbstractDataTypeElements());
	}
	
	public ParserRule getAbstractDataTypeRule() {
		return getAbstractDataTypeAccess().getRule();
	}

	//CharType:
	//
	//	{CharType} "char";
	public CharTypeElements getCharTypeAccess() {
		return (pCharType != null) ? pCharType : (pCharType = new CharTypeElements());
	}
	
	public ParserRule getCharTypeRule() {
		return getCharTypeAccess().getRule();
	}

	//NumberType:
	//
	//	{NumberType} "number";
	public NumberTypeElements getNumberTypeAccess() {
		return (pNumberType != null) ? pNumberType : (pNumberType = new NumberTypeElements());
	}
	
	public ParserRule getNumberTypeRule() {
		return getNumberTypeAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
