/*
* generated by Xtext
*/
grammar InternalUispecDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.lmrc.uispec.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.lmrc.uispec.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.lmrc.uispec.services.UispecDslGrammarAccess;

}

@parser::members {

 	private UispecDslGrammarAccess grammarAccess;
 	
    public InternalUispecDslParser(TokenStream input, UispecDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Form";	
   	}
   	
   	@Override
   	protected UispecDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleForm
entryRuleForm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormRule()); }
	 iv_ruleForm=ruleForm 
	 { $current=$iv_ruleForm.current; } 
	 EOF 
;

// Rule Form
ruleForm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='form' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFormAccess().getFormKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFormAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFormRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFormAccess().getUsedEntitiesEntityReferenceParserRuleCall_2_0()); 
	    }
		lv_usedEntities_2_0=ruleEntityReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormRule());
	        }
       		add(
       			$current, 
       			"usedEntities",
        		lv_usedEntities_2_0, 
        		"EntityReference");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFormAccess().getFieldsFieldParserRuleCall_3_0()); 
	    }
		lv_fields_3_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_3_0, 
        		"Field");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleEntityReference
entryRuleEntityReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityReferenceRule()); }
	 iv_ruleEntityReference=ruleEntityReference 
	 { $current=$iv_ruleEntityReference.current; } 
	 EOF 
;

// Rule EntityReference
ruleEntityReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='uses' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEntityReferenceAccess().getUsesKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntityReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getEntityReferenceAccess().getEntityEntityCrossReference_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQNRule()); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='field' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFieldAccess().getFieldKeyword_0());
    }
(
(
		lv_label_1_0=RULE_ID
		{
			newLeafNode(lv_label_1_0, grammarAccess.getFieldAccess().getLabelIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFieldAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getWidgetWidgetParserRuleCall_3_0()); 
	    }
		lv_widget_3_0=ruleWidget		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"widget",
        		lv_widget_3_0, 
        		"Widget");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='->' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFieldAccess().getHyphenMinusGreaterThanSignKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getAttributeAttributeCrossReference_5_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWidget
entryRuleWidget returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWidgetRule()); }
	 iv_ruleWidget=ruleWidget 
	 { $current=$iv_ruleWidget.current; } 
	 EOF 
;

// Rule Widget
ruleWidget returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getWidgetAccess().getTextFieldWidgetParserRuleCall_0()); 
    }
    this_TextFieldWidget_0=ruleTextFieldWidget
    { 
        $current = $this_TextFieldWidget_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getWidgetAccess().getCheckBoxWidgetParserRuleCall_1()); 
    }
    this_CheckBoxWidget_1=ruleCheckBoxWidget
    { 
        $current = $this_CheckBoxWidget_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getWidgetAccess().getComboWidgetParserRuleCall_2()); 
    }
    this_ComboWidget_2=ruleComboWidget
    { 
        $current = $this_ComboWidget_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTextFieldWidget
entryRuleTextFieldWidget returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextFieldWidgetRule()); }
	 iv_ruleTextFieldWidget=ruleTextFieldWidget 
	 { $current=$iv_ruleTextFieldWidget.current; } 
	 EOF 
;

// Rule TextFieldWidget
ruleTextFieldWidget returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='textfield' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTextFieldWidgetAccess().getTextfieldKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTextFieldWidgetAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_length_2_0=RULE_INT
		{
			newLeafNode(lv_length_2_0, grammarAccess.getTextFieldWidgetAccess().getLengthINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextFieldWidgetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"length",
        		lv_length_2_0, 
        		"INT");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTextFieldWidgetAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleCheckBoxWidget
entryRuleCheckBoxWidget returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCheckBoxWidgetRule()); }
	 iv_ruleCheckBoxWidget=ruleCheckBoxWidget 
	 { $current=$iv_ruleCheckBoxWidget.current; } 
	 EOF 
;

// Rule CheckBoxWidget
ruleCheckBoxWidget returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCheckBoxWidgetAccess().getCheckBoxWidgetAction_0(),
            $current);
    }
)	otherlv_1='checkbox' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCheckBoxWidgetAccess().getCheckboxKeyword_1());
    }
)
;





// Entry rule entryRuleComboWidget
entryRuleComboWidget returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComboWidgetRule()); }
	 iv_ruleComboWidget=ruleComboWidget 
	 { $current=$iv_ruleComboWidget.current; } 
	 EOF 
;

// Rule ComboWidget
ruleComboWidget returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getComboWidgetAccess().getComboWidgetAction_0(),
            $current);
    }
)	otherlv_1='combobox' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getComboWidgetAccess().getComboboxKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getComboWidgetAccess().getLeftParenthesisKeyword_2());
    }
((
(
		lv_values_3_0=RULE_ID
		{
			newLeafNode(lv_values_3_0, grammarAccess.getComboWidgetAccess().getValuesIDTerminalRuleCall_3_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComboWidgetRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_3_0, 
        		"ID");
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getComboWidgetAccess().getCommaKeyword_3_1_0());
    }
(
(
		lv_values_5_0=RULE_ID
		{
			newLeafNode(lv_values_5_0, grammarAccess.getComboWidgetAccess().getValuesIDTerminalRuleCall_3_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComboWidgetRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_5_0, 
        		"ID");
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getComboWidgetAccess().getRightParenthesisKeyword_4());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


