/*
* generated by Xtext
*/

package org.xtext.example.lmrc.uispec.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class UispecDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Form");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUsedEntitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUsedEntitiesEntityReferenceParserRuleCall_2_0 = (RuleCall)cUsedEntitiesAssignment_2.eContents().get(0);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsFieldParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		
		//Form:
		//	"form" name=ID usedEntities+=EntityReference* fields+=Field*;
		public ParserRule getRule() { return rule; }

		//"form" name=ID usedEntities+=EntityReference* fields+=Field*
		public Group getGroup() { return cGroup; }

		//"form"
		public Keyword getFormKeyword_0() { return cFormKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//usedEntities+=EntityReference*
		public Assignment getUsedEntitiesAssignment_2() { return cUsedEntitiesAssignment_2; }

		//EntityReference
		public RuleCall getUsedEntitiesEntityReferenceParserRuleCall_2_0() { return cUsedEntitiesEntityReferenceParserRuleCall_2_0; }

		//fields+=Field*
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_3_0() { return cFieldsFieldParserRuleCall_3_0; }
	}

	public class EntityReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntityEntityCrossReference_1_0 = (CrossReference)cEntityAssignment_1.eContents().get(0);
		private final RuleCall cEntityEntityFQNParserRuleCall_1_0_1 = (RuleCall)cEntityEntityCrossReference_1_0.eContents().get(1);
		
		//EntityReference:
		//	"uses" entity=[entity::Entity|FQN];
		public ParserRule getRule() { return rule; }

		//"uses" entity=[entity::Entity|FQN]
		public Group getGroup() { return cGroup; }

		//"uses"
		public Keyword getUsesKeyword_0() { return cUsesKeyword_0; }

		//entity=[entity::Entity|FQN]
		public Assignment getEntityAssignment_1() { return cEntityAssignment_1; }

		//[entity::Entity|FQN]
		public CrossReference getEntityEntityCrossReference_1_0() { return cEntityEntityCrossReference_1_0; }

		//FQN
		public RuleCall getEntityEntityFQNParserRuleCall_1_0_1() { return cEntityEntityFQNParserRuleCall_1_0_1; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelIDTerminalRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWidgetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWidgetWidgetParserRuleCall_3_0 = (RuleCall)cWidgetAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAttributeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cAttributeAttributeCrossReference_5_0 = (CrossReference)cAttributeAssignment_5.eContents().get(0);
		private final RuleCall cAttributeAttributeFQNParserRuleCall_5_0_1 = (RuleCall)cAttributeAttributeCrossReference_5_0.eContents().get(1);
		
		//Field:
		//	"field" label=ID ":" widget=Widget "->" attribute=[entity::Attribute|FQN];
		public ParserRule getRule() { return rule; }

		//"field" label=ID ":" widget=Widget "->" attribute=[entity::Attribute|FQN]
		public Group getGroup() { return cGroup; }

		//"field"
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }

		//label=ID
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_1_0() { return cLabelIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//widget=Widget
		public Assignment getWidgetAssignment_3() { return cWidgetAssignment_3; }

		//Widget
		public RuleCall getWidgetWidgetParserRuleCall_3_0() { return cWidgetWidgetParserRuleCall_3_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }

		//attribute=[entity::Attribute|FQN]
		public Assignment getAttributeAssignment_5() { return cAttributeAssignment_5; }

		//[entity::Attribute|FQN]
		public CrossReference getAttributeAttributeCrossReference_5_0() { return cAttributeAttributeCrossReference_5_0; }

		//FQN
		public RuleCall getAttributeAttributeFQNParserRuleCall_5_0_1() { return cAttributeAttributeFQNParserRuleCall_5_0_1; }
	}

	public class WidgetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Widget");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextFieldWidgetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCheckBoxWidgetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComboWidgetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Widget:
		//	TextFieldWidget | CheckBoxWidget | ComboWidget;
		public ParserRule getRule() { return rule; }

		//TextFieldWidget | CheckBoxWidget | ComboWidget
		public Alternatives getAlternatives() { return cAlternatives; }

		//TextFieldWidget
		public RuleCall getTextFieldWidgetParserRuleCall_0() { return cTextFieldWidgetParserRuleCall_0; }

		//CheckBoxWidget
		public RuleCall getCheckBoxWidgetParserRuleCall_1() { return cCheckBoxWidgetParserRuleCall_1; }

		//ComboWidget
		public RuleCall getComboWidgetParserRuleCall_2() { return cComboWidgetParserRuleCall_2; }
	}

	public class TextFieldWidgetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextFieldWidget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextfieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLengthINTTerminalRuleCall_2_0 = (RuleCall)cLengthAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TextFieldWidget:
		//	"textfield" "(" length=INT ")";
		public ParserRule getRule() { return rule; }

		//"textfield" "(" length=INT ")"
		public Group getGroup() { return cGroup; }

		//"textfield"
		public Keyword getTextfieldKeyword_0() { return cTextfieldKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//length=INT
		public Assignment getLengthAssignment_2() { return cLengthAssignment_2; }

		//INT
		public RuleCall getLengthINTTerminalRuleCall_2_0() { return cLengthINTTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CheckBoxWidgetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckBoxWidget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCheckBoxWidgetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCheckboxKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CheckBoxWidget:
		//	{CheckBoxWidget} "checkbox";
		public ParserRule getRule() { return rule; }

		//{CheckBoxWidget} "checkbox"
		public Group getGroup() { return cGroup; }

		//{CheckBoxWidget}
		public Action getCheckBoxWidgetAction_0() { return cCheckBoxWidgetAction_0; }

		//"checkbox"
		public Keyword getCheckboxKeyword_1() { return cCheckboxKeyword_1; }
	}

	public class ComboWidgetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComboWidget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComboWidgetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cComboboxKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cValuesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cValuesIDTerminalRuleCall_3_0_0 = (RuleCall)cValuesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cValuesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cValuesIDTerminalRuleCall_3_1_1_0 = (RuleCall)cValuesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ComboWidget:
		//	{ComboWidget} "combobox" "(" (values+=ID ("," values+=ID)*)? ")";
		public ParserRule getRule() { return rule; }

		//{ComboWidget} "combobox" "(" (values+=ID ("," values+=ID)*)? ")"
		public Group getGroup() { return cGroup; }

		//{ComboWidget}
		public Action getComboWidgetAction_0() { return cComboWidgetAction_0; }

		//"combobox"
		public Keyword getComboboxKeyword_1() { return cComboboxKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(values+=ID ("," values+=ID)*)?
		public Group getGroup_3() { return cGroup_3; }

		//values+=ID
		public Assignment getValuesAssignment_3_0() { return cValuesAssignment_3_0; }

		//ID
		public RuleCall getValuesIDTerminalRuleCall_3_0_0() { return cValuesIDTerminalRuleCall_3_0_0; }

		//("," values+=ID)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//values+=ID
		public Assignment getValuesAssignment_3_1_1() { return cValuesAssignment_3_1_1; }

		//ID
		public RuleCall getValuesIDTerminalRuleCall_3_1_1_0() { return cValuesIDTerminalRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	private FormElements pForm;
	private EntityReferenceElements pEntityReference;
	private FQNElements pFQN;
	private FieldElements pField;
	private WidgetElements pWidget;
	private TextFieldWidgetElements pTextFieldWidget;
	private CheckBoxWidgetElements pCheckBoxWidget;
	private ComboWidgetElements pComboWidget;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public UispecDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Form:
	//	"form" name=ID usedEntities+=EntityReference* fields+=Field*;
	public FormElements getFormAccess() {
		return (pForm != null) ? pForm : (pForm = new FormElements());
	}
	
	public ParserRule getFormRule() {
		return getFormAccess().getRule();
	}

	//EntityReference:
	//	"uses" entity=[entity::Entity|FQN];
	public EntityReferenceElements getEntityReferenceAccess() {
		return (pEntityReference != null) ? pEntityReference : (pEntityReference = new EntityReferenceElements());
	}
	
	public ParserRule getEntityReferenceRule() {
		return getEntityReferenceAccess().getRule();
	}

	//FQN:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//Field:
	//	"field" label=ID ":" widget=Widget "->" attribute=[entity::Attribute|FQN];
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//Widget:
	//	TextFieldWidget | CheckBoxWidget | ComboWidget;
	public WidgetElements getWidgetAccess() {
		return (pWidget != null) ? pWidget : (pWidget = new WidgetElements());
	}
	
	public ParserRule getWidgetRule() {
		return getWidgetAccess().getRule();
	}

	//TextFieldWidget:
	//	"textfield" "(" length=INT ")";
	public TextFieldWidgetElements getTextFieldWidgetAccess() {
		return (pTextFieldWidget != null) ? pTextFieldWidget : (pTextFieldWidget = new TextFieldWidgetElements());
	}
	
	public ParserRule getTextFieldWidgetRule() {
		return getTextFieldWidgetAccess().getRule();
	}

	//CheckBoxWidget:
	//	{CheckBoxWidget} "checkbox";
	public CheckBoxWidgetElements getCheckBoxWidgetAccess() {
		return (pCheckBoxWidget != null) ? pCheckBoxWidget : (pCheckBoxWidget = new CheckBoxWidgetElements());
	}
	
	public ParserRule getCheckBoxWidgetRule() {
		return getCheckBoxWidgetAccess().getRule();
	}

	//ComboWidget:
	//	{ComboWidget} "combobox" "(" (values+=ID ("," values+=ID)*)? ")";
	public ComboWidgetElements getComboWidgetAccess() {
		return (pComboWidget != null) ? pComboWidget : (pComboWidget = new ComboWidgetElements());
	}
	
	public ParserRule getComboWidgetRule() {
		return getComboWidgetAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
