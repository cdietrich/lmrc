/*
 * generated by Xtext
 */
package org.xtext.example.lmrc.uispec.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.xtext.example.lmrc.entity.entityDsl.Attribute;
import org.xtext.example.lmrc.entity.entityDsl.Entity;
import org.xtext.example.lmrc.uispec.uispecDsl.EntityReference;
import org.xtext.example.lmrc.uispec.uispecDsl.Field;
import org.xtext.example.lmrc.uispec.uispecDsl.Form;

import com.google.common.base.Function;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class UispecDslScopeProvider extends AbstractDeclarativeScopeProvider {
	
	IScope scope_Field_attribute(Field context, EReference ref) {
		Form form = EcoreUtil2.getContainerOfType(context, Form.class);
		List<Attribute> scope = new ArrayList<Attribute>();
		for (EntityReference usedEntity : form.getUsedEntities()) {
			scope.addAll(usedEntity.getEntity().getAttributes());
		}
		Function<Attribute, QualifiedName> nameComputation = new Function<Attribute, QualifiedName>() {

			@Override
			public QualifiedName apply(Attribute a) {
				return QualifiedName.create(((Entity)a.eContainer()).getName(), a.getName());
			}
		};
		return Scopes.scopeFor(scope, nameComputation , IScope.NULLSCOPE);
	}

}
